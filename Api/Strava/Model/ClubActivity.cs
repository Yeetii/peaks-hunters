/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Strava.Client.SwaggerDateConverter;

namespace Strava.Model
{
    /// <summary>
    /// ClubActivity
    /// </summary>
    [DataContract]
        public partial class ClubActivity :  IEquatable<ClubActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClubActivity" /> class.
        /// </summary>
        /// <param name="athlete">athlete.</param>
        /// <param name="name">The name of the activity.</param>
        /// <param name="distance">The activity&#x27;s distance, in meters.</param>
        /// <param name="movingTime">The activity&#x27;s moving time, in seconds.</param>
        /// <param name="elapsedTime">The activity&#x27;s elapsed time, in seconds.</param>
        /// <param name="totalElevationGain">The activity&#x27;s total elevation gain..</param>
        /// <param name="type">type.</param>
        /// <param name="sportType">sportType.</param>
        /// <param name="workoutType">The activity&#x27;s workout type.</param>
        public ClubActivity(MetaAthlete athlete = default(MetaAthlete), string name = default(string), float? distance = default(float?), int? movingTime = default(int?), int? elapsedTime = default(int?), float? totalElevationGain = default(float?), ActivityType type = default(ActivityType), SportType sportType = default(SportType), int? workoutType = default(int?))
        {
            this.Athlete = athlete;
            this.Name = name;
            this.Distance = distance;
            this.MovingTime = movingTime;
            this.ElapsedTime = elapsedTime;
            this.TotalElevationGain = totalElevationGain;
            this.Type = type;
            this.SportType = sportType;
            this.WorkoutType = workoutType;
        }
        
        /// <summary>
        /// Gets or Sets Athlete
        /// </summary>
        [DataMember(Name="athlete", EmitDefaultValue=false)]
        public MetaAthlete Athlete { get; set; }

        /// <summary>
        /// The name of the activity
        /// </summary>
        /// <value>The name of the activity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The activity&#x27;s distance, in meters
        /// </summary>
        /// <value>The activity&#x27;s distance, in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public float? Distance { get; set; }

        /// <summary>
        /// The activity&#x27;s moving time, in seconds
        /// </summary>
        /// <value>The activity&#x27;s moving time, in seconds</value>
        [DataMember(Name="moving_time", EmitDefaultValue=false)]
        public int? MovingTime { get; set; }

        /// <summary>
        /// The activity&#x27;s elapsed time, in seconds
        /// </summary>
        /// <value>The activity&#x27;s elapsed time, in seconds</value>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// The activity&#x27;s total elevation gain.
        /// </summary>
        /// <value>The activity&#x27;s total elevation gain.</value>
        [DataMember(Name="total_elevation_gain", EmitDefaultValue=false)]
        public float? TotalElevationGain { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ActivityType Type { get; set; }

        /// <summary>
        /// Gets or Sets SportType
        /// </summary>
        [DataMember(Name="sport_type", EmitDefaultValue=false)]
        public SportType SportType { get; set; }

        /// <summary>
        /// The activity&#x27;s workout type
        /// </summary>
        /// <value>The activity&#x27;s workout type</value>
        [DataMember(Name="workout_type", EmitDefaultValue=false)]
        public int? WorkoutType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClubActivity {\n");
            sb.Append("  Athlete: ").Append(Athlete).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  MovingTime: ").Append(MovingTime).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  TotalElevationGain: ").Append(TotalElevationGain).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SportType: ").Append(SportType).Append("\n");
            sb.Append("  WorkoutType: ").Append(WorkoutType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClubActivity);
        }

        /// <summary>
        /// Returns true if ClubActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of ClubActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClubActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Athlete == input.Athlete ||
                    (this.Athlete != null &&
                    this.Athlete.Equals(input.Athlete))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.MovingTime == input.MovingTime ||
                    (this.MovingTime != null &&
                    this.MovingTime.Equals(input.MovingTime))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.TotalElevationGain == input.TotalElevationGain ||
                    (this.TotalElevationGain != null &&
                    this.TotalElevationGain.Equals(input.TotalElevationGain))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SportType == input.SportType ||
                    (this.SportType != null &&
                    this.SportType.Equals(input.SportType))
                ) && 
                (
                    this.WorkoutType == input.WorkoutType ||
                    (this.WorkoutType != null &&
                    this.WorkoutType.Equals(input.WorkoutType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Athlete != null)
                    hashCode = hashCode * 59 + this.Athlete.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.MovingTime != null)
                    hashCode = hashCode * 59 + this.MovingTime.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.TotalElevationGain != null)
                    hashCode = hashCode * 59 + this.TotalElevationGain.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SportType != null)
                    hashCode = hashCode * 59 + this.SportType.GetHashCode();
                if (this.WorkoutType != null)
                    hashCode = hashCode * 59 + this.WorkoutType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

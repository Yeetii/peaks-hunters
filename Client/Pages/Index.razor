@page "/"
@using BlazorApp.Shared
@using System.Globalization
@using System.Drawing
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@using BlazorLeaflet.Models
@inject IJSRuntime jsRuntime

<PageTitle>PeaksHunters</PageTitle>

<div id="mapId">
    <LeafletMap Map="_map" />
</div>

<style>
    #mapId {
        height: 100%;
        width: 100%;
        position: fixed;
    }
</style>

@code
{
    private Map _map;
    private LatLng _startAt = new LatLng(63.4010888f, 13.0822241f);
    private int fetchRadius = 60000;
    private double cancelFetchZone = 0.3; // Cancel a new peaks fetch if within cancelFetchZone * fetchRadius
    List<LatLng> queriedLocations = new List<LatLng>();
    HashSet<Peak> peaks = new HashSet<Peak>();
    Dictionary<string, List<Activity>> summitedPeaks = new Dictionary<string, List<Activity>>();
    Dictionary<string, Circle> markers = new Dictionary<string, Circle>();

    protected override async Task OnInitializedAsync()
    {
        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });
            _map.OnMoveEnd += OnMoveEnd;
            _map.OnZoomEnd += OnZoomEnd;
        };

        try
        {
            StravaTokens? tokens = await localStorage.GetItemAsync<StravaTokens>("strava_tokens");

            if (tokens == null || tokens.access_token == null){
                NavManager.NavigateTo("/authenticate");
            } else if (DateTimeOffset.Now > DateTimeOffset.FromUnixTimeSeconds(tokens.expires_at)){
                Console.WriteLine("TODO USE REFRESH TOKEN!");
                NavManager.NavigateTo("/authenticate");
            } else {
                Task<Dictionary<string, List<Activity>>?> summitedPeaksTask = Http.GetFromJsonAsync<Dictionary<string, List<Activity>>>("/api/SummitedPeaks?access_token=" + tokens.access_token);
                
                Task peaksTask = FetchPeaks(_startAt, queriedLocations);

                await peaksTask;
                UpdateMarkers();
                summitedPeaks = await summitedPeaksTask ?? new Dictionary<string, List<Activity>>();
                UpdateMarkers();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async void OnMoveEnd(object sender, BlazorLeaflet.Models.Events.Event e)
    {
        LatLng center = await _map.GetCenter();
        foreach (LatLng fetchedCenter in queriedLocations){
            Coordinate fetchCenter = new Coordinate(center.Lat, center.Lng);
            Coordinate previousFetchCenter = new Coordinate(fetchedCenter.Lat, fetchedCenter.Lng);
            double distance = GeoSpatialFunctions.DistanceTo(fetchCenter, previousFetchCenter);
            if (distance < fetchRadius * cancelFetchZone){
                return;
            }
        }
        await FetchPeaks(center, queriedLocations);
        UpdateMarkers();
    }
    private void OnZoomEnd(object sender, BlazorLeaflet.Models.Events.Event e){
        Console.WriteLine("zoomend");
    }

    private async Task FetchPeaks(LatLng center, List<LatLng> queriedLocations)
    {
        string lat = center.Lat.ToString(CultureInfo.InvariantCulture);
        string lng = center.Lng.ToString(CultureInfo.InvariantCulture);
        Task<Peak[]?> peaksTask = Http.GetFromJsonAsync<Peak[]>($"/api/Peaks?lat={lat}&lon={lng}&radius={fetchRadius}");
        Peak[] newPeaks = await peaksTask ?? new Peak[]{};
        foreach(Peak peak in newPeaks){
            peaks.Add(peak);
        }
        queriedLocations.Add(center);
    }

    private void UpdateMarkers()
    {
        foreach (Peak peak in peaks){
            string peakId = peak.id + "";
            if (summitedPeaks.ContainsKey(peakId)){
                List<Activity> activities = summitedPeaks[peakId];
                string activityIds = string.Join(", ", activities.Select(x => "<a href=https://www.strava.com/activities/" + x.id + ">" + x.id + "</a>"));
                string popupMessage = $@"Climbed {activities.Count} time{((activities.Count > 1) ? 's' : ' ')} <br>
                                        Activity ids: {activityIds}";

                UpdateMarker(peak, Color.IndianRed, popupMessage);
            } else {
                if (!markers.ContainsKey(peakId)){
                    UpdateMarker(peak, Color.Gray, "");
                }
            }
        }
    }

    private void UpdateMarker(Peak peak, Color color, String popupMessage){
        string peakId = peak.id + "";
        if (markers.ContainsKey(peakId))
        {
            _map.RemoveLayer(markers[peakId]);
            markers.Remove(peakId);
        }
        Circle marker = createPeakMarker(peak, color);
        if (!String.IsNullOrEmpty(popupMessage))
        {
            marker.Popup = new Popup{ Content = popupMessage};
        }
        markers.TryAdd(peak.id + "", marker);
        _map.AddLayer(marker);
    } 

    public Circle createPeakMarker(Peak peak, Color markerColor){
        string alt_name = peak.name_sapmi ?? peak.name_alt;
        string tooltip = peak.name + (alt_name != null ?  " (" + alt_name + ")" : "") + (peak.elevation != null ? ", " + peak.elevation + "m" : "");
        
        Circle marker = new Circle();
        marker.Position = new LatLng((float)peak.location.coordinates[1], (float)peak.location.coordinates[0]);
        marker.Tooltip = new Tooltip { Content = tooltip };
        marker.FillColor = markerColor;
        marker.StrokeColor = markerColor;
        marker.Fill = true;
        marker.Radius = 500f;

        return marker;
    }
}
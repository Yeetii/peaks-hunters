@page "/"
@using BlazorApp.Shared
@inject HttpClient Http
@inject IMarkerFactory MarkerFactory
@inject IIconFactory IconFactory

<PageTitle>PeaksHunters</PageTitle>

<Map @ref="mapRef" MapOptions="@mapOptions"></Map>

<style>
    #mapId {
        height: 100%;
        width: 100%;
        position: fixed;
    }
</style>

@code {
    private Peak[] peaks = new Peak[]{};
    private Map mapRef;
    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(63.4010888, 13.0822241),
        Zoom = 10,
        UrlTileLayer = "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
	SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>,  <a href='https://opentopomap.org/credits'>OpenTopoMap</a>",
            TileSize = 256,
            ZoomOffset = 0,
            MaxZoom = 18,
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            peaks = await Http.GetFromJsonAsync<Peak[]>("/api/Peaks") ?? new Peak[]{};
            Dictionary<string, List<Activity>> summitedPeaks = await Http.GetFromJsonAsync<Dictionary<string, List<Activity>>>("/api/SummitedPeaks") ?? new Dictionary<string, List<Activity>>();
            
            foreach (Peak peak in peaks){
                bool isSummited = summitedPeaks.ContainsKey(peak.id + "");

                string markerColor = isSummited ? "green" : "grey";
                MarkerOptions markerOptions = new MarkerOptions()
                    {
                        Opacity = 1,
                        Draggable = false,
                        IconRef = await IconFactory.Create(coloredIconOptions(markerColor)),
                    };

                var marker = await MarkerFactory.CreateAndAddToMap(new LatLng(peak.location.coordinates[1], peak.location.coordinates[0]), mapRef, markerOptions);
                string alt_name = peak.name_sapmi ?? peak.name_alt;
                string tooltip = peak.name + (alt_name != null ?  " (" + alt_name + ")" : "") + (peak.elevation != null ? ", " + peak.elevation + "m" : "");
                await marker.BindTooltip(tooltip);

                if (isSummited){
                    List<Activity> activities = summitedPeaks[peak.id + ""];
                    await marker.BindPopup("Climbed " + activities.Count + " times");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
    public static IconOptions coloredIconOptions(string color){
        return new IconOptions()
            {
                IconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-" + color + ".png",
                ShadowUrl = "https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png",
                IconSize = new FisSst.BlazorMaps.Point(25, 41),
                IconAnchor = new FisSst.BlazorMaps.Point(12, 41),
                PopupAnchor = new FisSst.BlazorMaps.Point(1, -34),
                ShadowSize = new FisSst.BlazorMaps.Point(41, 41),
            };
    } 
}

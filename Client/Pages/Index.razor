@page "/"
@using BlazorApp.Shared
@inject HttpClient Http
@inject IMarkerFactory MarkerFactory
@inject IIconFactory IconFactory
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager

<PageTitle>PeaksHunters</PageTitle>

<Map @ref="mapRef" MapOptions="@mapOptions"></Map>

<style>
    #mapId {
        height: 100%;
        width: 100%;
        position: fixed;
    }
</style>

@code {
    private Map mapRef;
    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(63.4010888, 13.0822241),
        Zoom = 10,
        UrlTileLayer = "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
	SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>,  <a href='https://opentopomap.org/credits'>OpenTopoMap</a>",
            TileSize = 256,
            ZoomOffset = 0,
            MaxZoom = 18,
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            StravaTokens? tokens = await localStorage.GetItemAsync<StravaTokens>("strava_tokens");

            if (tokens == null || tokens.access_token == null){
                NavManager.NavigateTo("/authenticate");
            } else if (DateTimeOffset.Now > DateTimeOffset.FromUnixTimeSeconds(tokens.expires_at)){
                Console.WriteLine("TODO USE REFRESH TOKEN!");
                NavManager.NavigateTo("/authenticate");
            } else {
                Task<Peak[]?> peaksTask = Http.GetFromJsonAsync<Peak[]>("/api/Peaks");
                Task<Dictionary<string, List<Activity>>?> summitedPeaksTask = Http.GetFromJsonAsync<Dictionary<string, List<Activity>>>("/api/SummitedPeaks?access_token=" + tokens.access_token);
                
                Peak[] peaks = await peaksTask ?? new Peak[]{};

                Dictionary<string, Marker> markers = new Dictionary<string, Marker>();

                foreach (Peak peak in peaks){
                    Marker marker = await createPeakMarker(peak, "grey");
                    markers.Add(peak.id + "", marker);
                }

                Dictionary<string, List<Activity>> summitedPeaks = await summitedPeaksTask ?? new Dictionary<string, List<Activity>>();

                foreach (Peak peak in peaks){
                    string peakId = peak.id + "";
                    if (summitedPeaks.ContainsKey(peakId)){
                        await markers[peakId].Remove();
                        Marker marker = await createPeakMarker(peak, "green");
                        markers[peakId] = marker;
                        List<Activity> activities = summitedPeaks[peakId];
                        string activityIds = string.Join(", ", activities.Select(x => "<a href=https://www.strava.com/activities/" + x.id + ">" + x.id + "</a>"));
                        string popupMessage = $@"Climbed {activities.Count} time{((activities.Count > 1) ? 's' : ' ')} <br>
                                                Activity ids: {activityIds}";
                        await marker.BindPopup(popupMessage);
                        
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
    public static IconOptions coloredIconOptions(string color){
        return new IconOptions()
            {
                IconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-" + color + ".png",
                ShadowUrl = "https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png",
                IconSize = new FisSst.BlazorMaps.Point(25, 41),
                IconAnchor = new FisSst.BlazorMaps.Point(12, 41),
                PopupAnchor = new FisSst.BlazorMaps.Point(1, -34),
                ShadowSize = new FisSst.BlazorMaps.Point(41, 41),
            };
    } 

    public async Task<MarkerOptions> coloredMarkerOptions(string color){
        return new MarkerOptions()
            {
                Opacity = 1,
                Draggable = false,
                IconRef = await IconFactory.Create(coloredIconOptions(color)),
            };
    }

    public async Task<Marker> createPeakMarker(Peak peak, string markerColor){
        MarkerOptions markerOptions = await coloredMarkerOptions(markerColor);
        Marker marker = await MarkerFactory.CreateAndAddToMap(new LatLng(peak.location.coordinates[1], peak.location.coordinates[0]), mapRef, markerOptions);
        string alt_name = peak.name_sapmi ?? peak.name_alt;
        string tooltip = peak.name + (alt_name != null ?  " (" + alt_name + ")" : "") + (peak.elevation != null ? ", " + peak.elevation + "m" : "");
        await marker.BindTooltip(tooltip);
        return marker;
    }
}
